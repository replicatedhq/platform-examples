name: 'Test Deployment'
description: 'Test deployment using customer workflow'
inputs:
  app-dir:
    description: 'Application directory containing charts'
    default: 'applications/wg-easy'
  customer-name:
    description: 'Customer name for testing'
    required: true
  cluster-name:
    description: 'Cluster name for testing'
    required: true
  channel-name:
    description: 'Channel name for testing'
    required: false
  channel-id:
    description: 'Channel ID for testing (optional, takes precedence over channel-name)'
    required: false
  channel-slug:
    description: 'Channel slug for testing (optional, takes precedence over channel-name)'
    required: false
  helm-version:
    description: 'Helm version to use'
    default: '3.17.3'
  cleanup:
    description: 'Whether to cleanup resources after testing'
    default: 'false'

outputs:
  customer-id:
    description: 'Customer ID used for testing'
    value: ${{ steps.customer.outputs.customer-id }}
  license-id:
    description: 'License ID used for testing'
    value: ${{ steps.customer.outputs.license-id }}
  cluster-id:
    description: 'Cluster ID used for testing'
    value: ${{ steps.cluster.outputs.cluster-id }}

runs:
  using: 'composite'
  steps:
    - name: Setup tools
      uses: ./.github/actions/setup-tools
      with:
        helm-version: ${{ inputs.helm-version }}
        install-helmfile: 'true'

    - name: Get channel slug
      id: channel-slug
      shell: bash
      working-directory: ${{ inputs.app-dir }}
      run: |
        if [ -n "${{ inputs.channel-id }}" ]; then
          CHANNEL_SLUG=$(task utils:get-channel-slug CHANNEL_ID="${{ inputs.channel-id }}" --silent | tail -1)
          echo "channel-slug=$CHANNEL_SLUG" >> $GITHUB_OUTPUT
        elif [ -n "${{ inputs.channel-slug }}" ]; then
          echo "channel-slug=${{ inputs.channel-slug }}" >> $GITHUB_OUTPUT
        else
          echo "channel-slug=${{ inputs.channel-name }}" >> $GITHUB_OUTPUT
        fi

    - name: Create customer
      id: customer
      uses: replicatedhq/replicated-actions/create-customer@v1.19.0
      with:
        app-slug: ${{ env.REPLICATED_APP }}
        api-token: ${{ env.REPLICATED_API_TOKEN }}
        customer-name: ${{ inputs.customer-name }}
        channel-slug: ${{ steps.channel-slug.outputs.channel-slug }}
        license-type: dev

    - name: Create cluster
      id: cluster
      uses: replicatedhq/replicated-actions/create-cluster@v1.19.0
      with:
        api-token: ${{ env.REPLICATED_API_TOKEN }}
        kubernetes-distribution: k3s
        kubernetes-version: v1.32.2
        cluster-name: ${{ inputs.cluster-name }}
        ttl: 4h
        nodes: 1
        instance-type: r1.small
        export-kubeconfig: 'true'

    - name: Setup cluster ports
      shell: bash
      working-directory: ${{ inputs.app-dir }}
      run: |
        task cluster-ports-expose CLUSTER_NAME="${{ inputs.cluster-name }}"

    - name: Deploy application
      shell: bash
      working-directory: ${{ inputs.app-dir }}
      run: |
        if [ -n "${{ inputs.channel-id }}" ]; then
          task customer-helm-install \
            CUSTOMER_NAME="${{ inputs.customer-name }}" \
            CLUSTER_NAME="${{ inputs.cluster-name }}" \
            CHANNEL_ID="${{ inputs.channel-id }}" \
            REPLICATED_LICENSE_ID="${{ steps.customer.outputs.license-id }}"
        elif [ -n "${{ inputs.channel-slug }}" ]; then
          task customer-helm-install \
            CUSTOMER_NAME="${{ inputs.customer-name }}" \
            CLUSTER_NAME="${{ inputs.cluster-name }}" \
            CHANNEL_SLUG="${{ inputs.channel-slug }}" \
            REPLICATED_LICENSE_ID="${{ steps.customer.outputs.license-id }}"
        else
          task customer-helm-install \
            CUSTOMER_NAME="${{ inputs.customer-name }}" \
            CLUSTER_NAME="${{ inputs.cluster-name }}" \
            CHANNEL_SLUG="${{ inputs.channel-name }}" \
            REPLICATED_LICENSE_ID="${{ steps.customer.outputs.license-id }}"
        fi

    - name: Run tests
      shell: bash
      working-directory: ${{ inputs.app-dir }}
      run: task test

    # - name: Cleanup resources
    #   if: inputs.cleanup == 'true'
    #   shell: bash
    #   working-directory: ${{ inputs.app-dir }}
    #   run: |
    #     task cleanup-pr-resources BRANCH_NAME="${{ inputs.customer-name }}"
