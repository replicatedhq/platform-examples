name: 'Setup Common Tools'
description: 'Setup Helm, Task, yq, kubectl, preflight, helmfile, and Replicated CLI'
inputs:
  helm-version:
    description: 'Helm version'
    default: '3.17.3'
  kubectl-version:
    description: 'kubectl version'
    default: 'v1.30.0'
  app-dir:
    description: 'Application directory'
    default: 'applications/wg-easy'
  install-kubectl:
    description: 'Whether to install kubectl'
    default: 'false'
  install-preflight:
    description: 'Whether to install preflight'
    default: 'false'
  install-helmfile:
    description: 'Whether to install helmfile'
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: ${{ inputs.helm-version }}
    
    - name: Setup Task
      uses: arduino/setup-task@v2
      with:
        version: 3.x
        repo-token: ${{ github.token }}
    
    - name: Setup kubectl
      if: inputs.install-kubectl == 'true'
      uses: azure/setup-kubectl@v4
      with:
        version: ${{ inputs.kubectl-version }}
    
    - name: Cache tools
      uses: actions/cache@v4
      with:
        path: |
          /usr/local/bin/yq
          /usr/local/bin/preflight
          /usr/local/bin/helmfile
          /usr/local/bin/replicated
          ~/.replicated
        key: tools-${{ runner.os }}-yq-v4.44.3-preflight-v0.95.0-helmfile-v0.170.0-replicated-${{ hashFiles('**/taskfiles/utils.yml') }}
        restore-keys: |
          tools-${{ runner.os }}-yq-v4.44.3-preflight-v0.95.0-helmfile-v0.170.0-
    
    - name: Install yq
      shell: bash
      run: |
        if [ ! -f /usr/local/bin/yq ]; then
          echo "Installing yq v4.44.3..."
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
        else
          echo "yq already installed (cached)"
        fi
    
    - name: Install preflight CLI
      if: inputs.install-preflight == 'true'
      shell: bash
      run: |
        if [ ! -f /usr/local/bin/preflight ]; then
          echo "Installing preflight v0.95.0..."
          curl -L https://github.com/replicatedhq/troubleshoot/releases/download/v0.95.0/preflight_linux_amd64.tar.gz | tar xz
          sudo mv preflight /usr/local/bin/
        else
          echo "preflight already installed (cached)"
        fi
    
    - name: Install helmfile
      if: inputs.install-helmfile == 'true'
      shell: bash
      run: |
        if [ ! -f /usr/local/bin/helmfile ]; then
          echo "Installing helmfile v0.170.0..."
          curl -L https://github.com/helmfile/helmfile/releases/download/v0.170.0/helmfile_0.170.0_linux_amd64.tar.gz | tar xz
          sudo mv helmfile /usr/local/bin/
          sudo chmod +x /usr/local/bin/helmfile
        else
          echo "helmfile already installed (cached)"
        fi
    
    - name: Install Replicated CLI
      shell: bash
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        if [ ! -f /usr/local/bin/replicated ]; then
          echo "Installing Replicated CLI..."
          
          # Detect OS and architecture
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m)
          
          # Map architecture names
          case $ARCH in
            x86_64)
              ARCH="amd64"
              ;;
            aarch64|arm64)
              ARCH="arm64"
              ;;
            *)
              echo "Unsupported architecture: $ARCH"
              exit 1
              ;;
          esac
          
          echo "Detected OS: $OS, Architecture: $ARCH"
          
          # Get download URL using authenticated API call
          if [ "$OS" = "linux" ]; then
            DOWNLOAD_URL=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
              https://api.github.com/repos/replicatedhq/replicated/releases/latest \
              | grep "browser_download_url.*_linux_${ARCH}.tar.gz" \
              | head -1 \
              | cut -d '"' -f 4)
          elif [ "$OS" = "darwin" ]; then
            DOWNLOAD_URL=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
              https://api.github.com/repos/replicatedhq/replicated/releases/latest \
              | grep "browser_download_url.*_darwin_all.tar.gz" \
              | head -1 \
              | cut -d '"' -f 4)
          else
            echo "Unsupported operating system: $OS"
            exit 1
          fi
          
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "Error: Could not find download URL for Replicated CLI"
            exit 1
          fi
          
          echo "Downloading from: $DOWNLOAD_URL"
          curl -L -o replicated.tar.gz "$DOWNLOAD_URL"
          tar xzf replicated.tar.gz
          sudo mv replicated /usr/local/bin/replicated
          sudo chmod +x /usr/local/bin/replicated
          rm replicated.tar.gz
          
          echo "Replicated CLI installed successfully!"
          replicated version
        else
          echo "Replicated CLI already installed (cached)"
          replicated version
        fi
