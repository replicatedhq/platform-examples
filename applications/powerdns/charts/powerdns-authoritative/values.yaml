# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.5.1/charts/other/app-template/values.schema.json

#### PowerDNS Workload Definitions
controllers:
  main:
    strategy: Recreate
    type: deployment
    annotations: {}
    labels: {}
    containers:
      main:
        enabled: true
        image:
          repository: powerdns/pdns-auth-49
          tag: 4.9.2
        env:
          DEBUG_CONFIG: 'yes'
          PDNS_AUTH_API_KEY: 'changeme'
  admin:
    strategy: Recreate
    type: deployment
    containers:
      main:
        enabled: true
        image:
          repository: powerdnsadmin/pda-legacy
          tag: v0.4.2
        env:
          SQLALCHEMY_DATABASE_URI: postgresql://pdns:pdns@powerdns-postgres-rw:5432/pdns

configMaps:
  config:
    enabled: true
    data:
      99-pdns.conf: |
        launch=gpgsql
        gpgsql-host=powerdns-postgres-rw
        gpgsql-dbname=pdns
        gpgsql-user=pdns
        gpgsql-password=pdns
        local-address=0.0.0.0
        local-port=5353
  initdb:
    enabled: true
    data:
      initdb.sql: |
        CREATE TABLE domains (
          id                    SERIAL PRIMARY KEY,
          name                  VARCHAR(255) NOT NULL,
          master                VARCHAR(128) DEFAULT NULL,
          last_check            INT DEFAULT NULL,
          type                  TEXT NOT NULL,
          notified_serial       BIGINT DEFAULT NULL,
          account               VARCHAR(40) DEFAULT NULL,
          options               TEXT DEFAULT NULL,
          catalog               TEXT DEFAULT NULL,
          CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
        );
        CREATE UNIQUE INDEX name_index ON domains(name);
        CREATE INDEX catalog_idx ON domains(catalog);
        CREATE TABLE records (
          id                    BIGSERIAL PRIMARY KEY,
          domain_id             INT DEFAULT NULL,
          name                  VARCHAR(255) DEFAULT NULL,
          type                  VARCHAR(10) DEFAULT NULL,
          content               VARCHAR(65535) DEFAULT NULL,
          ttl                   INT DEFAULT NULL,
          prio                  INT DEFAULT NULL,
          disabled              BOOL DEFAULT 'f',
          ordername             VARCHAR(255),
          auth                  BOOL DEFAULT 't',
          CONSTRAINT domain_exists
          FOREIGN KEY(domain_id) REFERENCES domains(id)
          ON DELETE CASCADE,
          CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
        );
        CREATE INDEX rec_name_index ON records(name);
        CREATE INDEX nametype_index ON records(name,type);
        CREATE INDEX domain_id ON records(domain_id);
        CREATE INDEX recordorder ON records (domain_id, ordername text_pattern_ops);
        CREATE TABLE supermasters (
          ip                    INET NOT NULL,
          nameserver            VARCHAR(255) NOT NULL,
          account               VARCHAR(40) NOT NULL,
          PRIMARY KEY(ip, nameserver)
        );
        CREATE TABLE comments (
          id                    SERIAL PRIMARY KEY,
          domain_id             INT NOT NULL,
          name                  VARCHAR(255) NOT NULL,
          type                  VARCHAR(10) NOT NULL,
          modified_at           INT NOT NULL,
          account               VARCHAR(40) DEFAULT NULL,
          comment               VARCHAR(65535) NOT NULL,
          CONSTRAINT domain_exists
          FOREIGN KEY(domain_id) REFERENCES domains(id)
          ON DELETE CASCADE,
          CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
        );
        CREATE INDEX comments_domain_id_idx ON comments (domain_id);
        CREATE INDEX comments_name_type_idx ON comments (name, type);
        CREATE INDEX comments_order_idx ON comments (domain_id, modified_at);
        CREATE TABLE domainmetadata (
          id                    SERIAL PRIMARY KEY,
          domain_id             INT REFERENCES domains(id) ON DELETE CASCADE,
          kind                  VARCHAR(32),
          content               TEXT
        );
        CREATE INDEX domainidmetaindex ON domainmetadata(domain_id);
        CREATE TABLE cryptokeys (
          id                    SERIAL PRIMARY KEY,
          domain_id             INT REFERENCES domains(id) ON DELETE CASCADE,
          flags                 INT NOT NULL,
          active                BOOL,
          published             BOOL DEFAULT TRUE,
          content               TEXT
        );
        CREATE INDEX domainidindex ON cryptokeys(domain_id);
        CREATE TABLE tsigkeys (
          id                    SERIAL PRIMARY KEY,
          name                  VARCHAR(255),
          algorithm             VARCHAR(50),
          secret                VARCHAR(255),
          CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
        );
        CREATE UNIQUE INDEX namealgoindex ON tsigkeys(name, algorithm);

persistence:
  config:
    enabled: true
    type: configMap
    name: powerdns-authoritative-config
    advancedMounts:
      main:
        main:
          - path: /etc/powerdns/pdns.d/pdns.conf
            subPath: 99-pdns.conf

service:
  main:
    enabled: true
    controller: main
    type: ClusterIP
    ports:
      udp:
        port: 53
        targetPort: 5353
        protocol: UDP
      tcp:
        port: 53
        targetPort: 5353
        protocol: TCP
  admin:
    enabled: true
    controller: admin
    type: ClusterIP
    ports:
      http:
        port: 80
        protocol: HTTP
      https:
        port: 443
        protocol: HTTP

ingress:
  admin:
    enabled: false
    hosts:
      - host: '*'
        paths:
          - path: /
            pathType: Prefix
            service:
              identifier: main
              port: http

#### PowerDNS User-Facing Application Configuration
# powerdns:

# -- Embedded Postgres configuration
# Deploys a cluster using the CloudnativePG Operator
# [[ref]](https://github.com/cloudnative-pg/cloudnative-pg)
postgres:
  # -- Postgres credentials secret configuration
  auth:
    username: pdns
    password: pdns

  embedded:
    # -- Specifies whether to enable the Embedded Postgres cluster
    enabled: true
    # -- Postgres cluster annotations
    annotations: {}
    # -- Addtional labels for Postgres cluster
    additionalLabels: {}
    # -- Number of Postgres instances to deploy
    instances: 1
    image:
      # -- Image registry
      repository: ghcr.io/cloudnative-pg/postgresql
      # -- Image tag
      tag: '15.2'
    # -- Image pull policy
    imagePullPolicy: IfNotPresent
    # -- Image pull secrets
    imagePullSecrets: []
    # -- Postgres InitDB configuration
    initdb:
      # -- Postgres database name to be initilized
      database: pdns
      # -- Postgres username name to be initilized
      owner: pdns
      # -- Postgres secret name
      # secret:
      #   name: powerdns-postgres-auth
      # -- Postgres init application SQL
      postInitApplicationSQL:
        - configMapRefs:
            name: powerdns-authoritative-initdb
            key: initdb.sql
    # -- Postgres UID
    postgresUID: 26
    # -- Postgres GID
    postgresGID: 26
    # -- Postgres storage configuration
    storage:
      size: 10Gi
      storageClass: ''
    # -- Postgres resources
    resources: {}
    # -- Postgres priority class name
    priorityClassName: ''
    # -- Postgres primary update method
    primaryUpdateMethod: switchover
    # -- Postgres primary update strategy
    primaryUpdateStrategy: unsupervised
    # -- Postgres log level
    logLevel: 'info'
    # -- Affinity/Anti-affinity rules for Pods.
    # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-AffinityConfiguration
    affinity:
      topologyKey: topology.kubernetes.io/zone
    # -- The configuration for the CA and related certificates.
    # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-CertificatesConfiguration
    certificates: {}
    # -- When this option is enabled, the operator will use the SuperuserSecret to update the postgres user password.
    # If the secret is not present, the operator will automatically create one.
    # When this option is disabled, the operator will ignore the SuperuserSecret content, delete it when automatically created,
    # and then blank the password of the postgres user by setting it to NULL.
    enableSuperuserAccess: true
    superuserSecret: ''

    # -- This feature enables declarative management of existing roles, as well as the creation of new roles if they are not
    # already present in the database.
    # See: https://cloudnative-pg.io/documentation/current/declarative_role_management/
    roles:
      []
      # - name: dante
      #   ensure: present
      #   comment: Dante Alighieri
      #   login: true
      #   superuser: false
      #   inRoles:
      #     - pg_monitor
      #     - pg_signal_backend

    # -- Configuration of the PostgreSQL server.
    # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-PostgresConfiguration
    postgresql:
      {}
      # max_connections: 300
  external:
    # -- Specifies whether to use an external PostgresSQL cluster
    # NOTE: If you enabled External PostgreSQL, you should disable the Embedded PostgreSQL (cluster.enabled: false)
    enabled: false
    # -- External Postgres host
    host: ''
    # -- External Postgres port
    port: 5432
    # -- External Postgres database
    database: pdns

#### Replicated SDK Configuration
replicated:
  enabled: true
