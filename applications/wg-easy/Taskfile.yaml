version: "3"

# This is a shim taskfile for running tasks inside Podman
# The actual taskfile that is mounted within the container lives in taskfiles/internal.yaml

includes:
  container:
    internal: true
    taskfile: ./taskfiles/container.yml

tasks:
  default:
    desc: Show available tasks
    silent: true
    cmds:
      - task --list

  helm:
    desc: 'Run helm with args inside the container (example: "task helm -- show chart ./cert-manager")'
    cmds:
      - task: container:exec
        vars:
          CMD: 'helm {{.CLI_ARGS}}'

  kubectl:
    desc: 'Run kubectl with args inside the container (example: "task kubectl -- version --client")'
    cmds:
      - task: container:exec
        vars:
          CMD: 'kubectl {{.CLI_ARGS}}'

  cluster-create:
    desc: Create a test cluster using Replicated Compatibility Matrix (use EMBEDDED=true for embedded clusters)
    cmds:
      - task: container:exec
        vars:
          CMD: 'task {{.TASK}} {{.EMBEDDED}} {{.LICENSE_ID}} {{.TIMEOUT}} {{.TTL}} {{.DISTRIBUTION}} {{.K8S_VERSION}} {{.DISK_SIZE}} {{.INSTANCE_TYPE}}'
    vars:
      EMBEDDED: "{{if .EMBEDDED}}EMBEDDED={{.EMBEDDED}}{{end}}"
      LICENSE_ID: "{{if .LICENSE_ID}}LICENSE_ID={{.LICENSE_ID}}{{end}}"
      TIMEOUT: "{{if .TIMEOUT}}TIMEOUT={{.TIMEOUT}}{{end}}"
      TTL: "{{if .TTL}}TTL={{.TTL}}{{end}}"
      DISTRIBUTION: "{{if .DISTRIBUTION}}DISTRIBUTION={{.DISTRIBUTION}}{{end}}"
      K8S_VERSION: "{{if .K8S_VERSION}}K8S_VERSION={{.K8S_VERSION}}{{end}}"
      DISK_SIZE: "{{if .DISK_SIZE}}DISK_SIZE={{.DISK_SIZE}}{{end}}"
      INSTANCE_TYPE: "{{if .INSTANCE_TYPE}}INSTANCE_TYPE={{.INSTANCE_TYPE}}{{end}}"

  cluster-list:
    desc: List the cluster
    cmds:
      - task: container:exec
        vars:
          CMD: 'task {{.TASK}} {{.CLUSTER_NAME}}'
    vars:
      CLUSTER_NAME: "{{if .CLUSTER_NAME}}CLUSTER_NAME={{.CLUSTER_NAME}}{{end}}"

  test:
    desc: Run a basic test suite
    cmds:
      - task: container:exec
        vars:
          CMD: 'task {{.TASK}}'

  verify-kubeconfig:
    desc: Verify kubeconfig
    cmds:
      - task: container:exec
        vars:
          CMD: 'task {{.TASK}} {{.CLUSTER_NAME}}'
    vars:
      CLUSTER_NAME: "{{if .CLUSTER_NAME}}CLUSTER_NAME={{.CLUSTER_NAME}}{{end}}"

  # deps:
  #   - cluster-create
  #   - verify-kubeconfig
  setup-kubeconfig:
    desc: Get kubeconfig and prepare cluster for application deployment
    cmds:
      - task: container:exec
        vars:
          CMD: 'task {{.TASK}} {{.DISTRIBUTION}} {{.EMBEDDED}} {{.LICENSE_ID}} {{.TIMEOUT}} {{.TTL}} {{.DISTRIBUTION}} {{.K8S_VERSION}} {{.DISK_SIZE}} {{.INSTANCE_TYPE}} {{.CLUSTER_NAME}}'
    vars:
      DISTRIBUTION: "{{if .DISTRIBUTION}}DISTRIBUTION={{.DISTRIBUTION}}{{end}}"
      # from deps cluster-create
      EMBEDDED: "{{if .EMBEDDED}}EMBEDDED={{.EMBEDDED}}{{end}}"
      LICENSE_ID: "{{if .LICENSE_ID}}LICENSE_ID={{.LICENSE_ID}}{{end}}"
      TIMEOUT: "{{if .TIMEOUT}}TIMEOUT={{.TIMEOUT}}{{end}}"
      TTL: "{{if .TTL}}TTL={{.TTL}}{{end}}"
      DISTRIBUTION: "{{if .DISTRIBUTION}}DISTRIBUTION={{.DISTRIBUTION}}{{end}}"
      K8S_VERSION: "{{if .K8S_VERSION}}K8S_VERSION={{.K8S_VERSION}}{{end}}"
      DISK_SIZE: "{{if .DISK_SIZE}}DISK_SIZE={{.DISK_SIZE}}{{end}}"
      INSTANCE_TYPE: "{{if .INSTANCE_TYPE}}INSTANCE_TYPE={{.INSTANCE_TYPE}}{{end}}"
      # from deps verify-kubeconfig
      CLUSTER_NAME: "{{if .CLUSTER_NAME}}CLUSTER_NAME={{.CLUSTER_NAME}}{{end}}"

  dependencies-update:
    desc: Update Helm dependencies for all charts
    cmds:
      - task: container:exec
        vars:
          CMD: 'task {{.TASK}}'

  cluster-ports-expose:
    desc: Expose configured ports and capture exposed URLs
    cmds:
      - task: container:exec
        vars:
          CMD: 'task {{.TASK}} {{.CLUSTER_NAME}} {{.OPERATION}}'
    vars:
      CLUSTER_NAME: "{{if .CLUSTER_NAME}}CLUSTER_NAME={{.CLUSTER_NAME}}{{end}}"
      # from task: utils:port-operations
      OPERATION: "{{if .OPERATION}}OPERATION={{.OPERATION}}{{end}}"
      # CLUSTER_NAME already above

  # deps:
  #     - setup-kubeconfig
  #     - cluster-ports-expose
  helm-install:
    desc: Deploy all charts using helmfile
    cmds:
      - task: container:exec
        vars:
          CMD: 'task {{.TASK}} {{.DISTRIBUTION}} {{.EMBEDDED}} {{.LICENSE_ID}} {{.TIMEOUT}} {{.TTL}} {{.DISTRIBUTION}} {{.K8S_VERSION}} {{.DISK_SIZE}} {{.INSTANCE_TYPE}} {{.CLUSTER_NAME}} {{.OPERATION}}'
    vars:
      # from deps setup-kubeconfig
      DISTRIBUTION: "{{if .DISTRIBUTION}}DISTRIBUTION={{.DISTRIBUTION}}{{end}}"
      # from deps cluster-create
      EMBEDDED: "{{if .EMBEDDED}}EMBEDDED={{.EMBEDDED}}{{end}}"
      LICENSE_ID: "{{if .LICENSE_ID}}LICENSE_ID={{.LICENSE_ID}}{{end}}"
      TIMEOUT: "{{if .TIMEOUT}}TIMEOUT={{.TIMEOUT}}{{end}}"
      TTL: "{{if .TTL}}TTL={{.TTL}}{{end}}"
      DISTRIBUTION: "{{if .DISTRIBUTION}}DISTRIBUTION={{.DISTRIBUTION}}{{end}}"
      K8S_VERSION: "{{if .K8S_VERSION}}K8S_VERSION={{.K8S_VERSION}}{{end}}"
      DISK_SIZE: "{{if .DISK_SIZE}}DISK_SIZE={{.DISK_SIZE}}{{end}}"
      INSTANCE_TYPE: "{{if .INSTANCE_TYPE}}INSTANCE_TYPE={{.INSTANCE_TYPE}}{{end}}"
      ## from deps verify-kubeconfig
      CLUSTER_NAME: "{{if .CLUSTER_NAME}}CLUSTER_NAME={{.CLUSTER_NAME}}{{end}}"
      # from deps cluster-ports-expose
      ## CLUSTER_NAME: "{{if .CLUSTER_NAME}}CLUSTER_NAME={{.CLUSTER_NAME}}{{end}}"
      ## from task: utils:port-operations
      OPERATION: "{{if .OPERATION}}OPERATION={{.OPERATION}}{{end}}"
      ## CLUSTER_NAME already above

  cluster-delete:
    desc: Delete all test clusters with matching name and clean up kubeconfig
    cmds:
      - task: container:exec
        vars:
          CMD: 'task {{.TASK}}'

  release-prepare:
    desc: Prepare release files by copying replicated YAML files and packaging Helm charts
    cmds:
      - task: container:exec
        vars:
          CMD: 'task {{.TASK}}'

  release-create:
    desc: Create and promote a release using the Replicated CLI
    cmds:
      - task: container:exec
        vars:
          CMD: 'task {{.TASK}}'

  customer-create:
    desc: Create a new customer or get existing customer with matching name and return their ID
    cmds:
      - task: container:exec
        vars:
          CMD: 'task {{.TASK}} CUSTOMER_NAME={{.CUSTOMER_NAME}} CUSTOMER_EMAIL={{.CUSTOMER_EMAIL}} LICENSE_TYPE={{.LICENSE_TYPE}} EXPIRES_IN={{.EXPIRES_IN}}'

  gcp-vm-create:
    desc: Create a simple GCP VM instance
    cmds:
      - task: container:exec
        vars:
          CMD: 'task {{.TASK}}'

  gcp-vm-delete:
    desc: Delete the GCP VM instance for K8s and VPN
    cmds:
      - task: container:exec
        vars:
          CMD: 'task {{.TASK}}'

  embedded-cluster-setup:
    desc: Setup Replicated embedded cluster on the GCP VM
    cmds:
      - task: container:exec
        vars:
          CMD: 'task {{.TASK}}'

  customer-ls:
    desc: List customers for the application
    cmds:
      - task: container:exec
        vars:
          CMD: 'task {{.TASK}}'

  customer-delete:
    desc: Archive a customer by ID
    cmds:
      - task: container:exec
        vars:
          CMD: 'task {{.TASK}}'

  clean:
    desc: Remove temporary Helm directories, chart dependencies, and release folder
    cmds:
      - task: container:exec
        vars:
          CMD: 'task {{.TASK}}'

  full-test-cycle:
    desc: Create cluster, get kubeconfig, expose ports, update dependencies, deploy charts, test, and delete
    cmds:
      - task: container:exec
        vars:
          CMD: 'task {{.TASK}}'
