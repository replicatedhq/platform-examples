version: "3"

tasks:
  install-replicated-cli:
    desc: Install the latest Replicated CLI binary
    silent: false
    run: once
    status:
      - command -v replicated >/dev/null 2>&1
    cmds:
      - |
        echo "Installing Replicated CLI..."
        
        # Detect OS and architecture
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')
        ARCH=$(uname -m)
        
        # Map architecture names
        case $ARCH in
          x86_64)
            ARCH="amd64"
            ;;
          aarch64|arm64)
            ARCH="arm64"
            ;;
          *)
            echo "Unsupported architecture: $ARCH"
            exit 1
            ;;
        esac
        
        echo "Detected OS: $OS, Architecture: $ARCH"
        
        # Create a temporary directory for extraction
        TEMP_DIR=$(mktemp -d)
        cd "$TEMP_DIR"
        
        # Download and install based on OS
        if [ "$OS" = "linux" ]; then
          echo "Downloading Replicated CLI for Linux..."
          # Use authenticated API call if GITHUB_TOKEN is available
          if [ -n "${GITHUB_TOKEN:-}" ]; then
            DOWNLOAD_URL=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
              https://api.github.com/repos/replicatedhq/replicated/releases/latest \
              | grep "browser_download_url.*_linux_${ARCH}.tar.gz" \
              | head -1 \
              | cut -d '"' -f 4)
          else
            DOWNLOAD_URL=$(curl -s https://api.github.com/repos/replicatedhq/replicated/releases/latest \
              | grep "browser_download_url.*_linux_${ARCH}.tar.gz" \
              | head -1 \
              | cut -d '"' -f 4)
          fi
          
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "Error: Could not find download URL for *_linux_${ARCH}.tar.gz"
            exit 1
          fi
          
          curl -L -o replicated.tar.gz "$DOWNLOAD_URL"
          tar xzf replicated.tar.gz
          sudo mv replicated /usr/local/bin/replicated
          
        elif [ "$OS" = "darwin" ]; then
          echo "Downloading Replicated CLI for macOS..."
          # Use authenticated API call if GITHUB_TOKEN is available
          if [ -n "${GITHUB_TOKEN:-}" ]; then
            DOWNLOAD_URL=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
              https://api.github.com/repos/replicatedhq/replicated/releases/latest \
              | grep "browser_download_url.*_darwin_all.tar.gz" \
              | head -1 \
              | cut -d '"' -f 4)
          else
            DOWNLOAD_URL=$(curl -s https://api.github.com/repos/replicatedhq/replicated/releases/latest \
              | grep "browser_download_url.*_darwin_all.tar.gz" \
              | head -1 \
              | cut -d '"' -f 4)
          fi
          
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "Error: Could not find download URL for *_darwin_all.tar.gz"
            exit 1
          fi
          
          curl -L -o replicated.tar.gz "$DOWNLOAD_URL"
          tar xzf replicated.tar.gz
          sudo mv replicated /usr/local/bin/replicated
          
        else
          echo "Unsupported operating system: $OS"
          echo "Please install manually from: https://docs.replicated.com/reference/replicated-cli-installing"
          cd - >/dev/null
          rm -rf "$TEMP_DIR"
          exit 1
        fi
        
        # Clean up temporary directory
        cd - >/dev/null
        rm -rf "$TEMP_DIR"
        
        # Verify installation
        if command -v replicated >/dev/null 2>&1; then
          echo "Replicated CLI installed successfully!"
          replicated version
        else
          echo "Failed to install Replicated CLI"
          exit 1
        fi
  get-kubeconfig:
    desc: Get kubeconfig for the test cluster (internal)
    internal: true
    run: once
    vars:
      CLUSTER_NAME: '{{.CLUSTER_NAME}}'
      KUBECONFIG_FILE: '{{.KUBECONFIG_FILE}}'
    cmds:
      - |
        echo "Getting kubeconfig for cluster {{.CLUSTER_NAME}}..."
        replicated cluster kubeconfig --name {{.CLUSTER_NAME}} --output-path {{.KUBECONFIG_FILE}}
    status:
      - test -f {{.KUBECONFIG_FILE}}

  remove-k3s-traefik:
    desc: Remove pre-installed Traefik from k3s clusters (internal)
    internal: true
    run: once
    vars:
      CLUSTER_NAME: '{{.CLUSTER_NAME}}'
      KUBECONFIG_FILE: '{{.KUBECONFIG_FILE}}'
    status:
      - |
        # Only check if we need to run this for k3s distributions
        if [ "{{.DISTRIBUTION}}" != "k3s" ]; then
          exit 0  # Not a k3s cluster, so we're "done"
        fi
        
        # Check if traefik is already removed by looking for the helm releases
        KUBECONFIG={{.KUBECONFIG_FILE}} helm list -n kube-system -o json | \
          jq -e 'map(select(.name == "traefik" or .name == "traefik-crd")) | length == 0' >/dev/null
    cmds:
      - |
        # Only run for k3s distributions
        if [ "{{.DISTRIBUTION}}" = "k3s" ]; then
          echo "Checking for pre-installed Traefik in k3s cluster..."
          
          # Check if traefik is installed in kube-system namespace
          TRAEFIK_CHARTS=$(KUBECONFIG={{.KUBECONFIG_FILE}} helm list -n kube-system -o json | jq -r '.[] | select(.name == "traefik" or .name == "traefik-crd") | .name')
          
          if [ -n "$TRAEFIK_CHARTS" ]; then
            echo "Found pre-installed Traefik charts in kube-system namespace. Removing..."
            
            for chart in $TRAEFIK_CHARTS; do
              echo "Uninstalling chart: $chart"
              KUBECONFIG={{.KUBECONFIG_FILE}} helm uninstall $chart -n kube-system --wait
            done
            
            echo "Pre-installed Traefik removed successfully!"
          else
            echo "No pre-installed Traefik charts found in kube-system namespace."
          fi
        else
          echo "Not a k3s cluster, skipping Traefik removal."
        fi
    deps:
      - get-kubeconfig

  wait-for-cluster:
    desc: Wait for cluster to be in running state
    internal: true
    vars:
      CLUSTER_NAME: '{{.CLUSTER_NAME}}'
      TIMEOUT: '{{.TIMEOUT | default "300"}}'
    cmds:
      - |
        echo "Waiting for cluster {{.CLUSTER_NAME}} (timeout {{.TIMEOUT}}s)..."
        start=$(date +%s)
        attempt=1
        while true; do
          CLUSTER_STATUS=$(replicated cluster ls --output json | jq -r '.[] | select(.name == "{{.CLUSTER_NAME}}") | .status // empty')
          
          if [ "$CLUSTER_STATUS" = "running" ]; then
            elapsed=$(($(date +%s) - start))
            echo "Cluster {{.CLUSTER_NAME}} is ready! (took $elapsed seconds)"
            break
          fi
          
          elapsed=$(($(date +%s) - start))
          if [ $elapsed -ge {{.TIMEOUT}} ]; then
            echo "Timeout after {{.TIMEOUT}} seconds waiting for cluster to be ready"
            exit 1
          fi
          
          printf "\rWaiting... %ds elapsed (attempt %d) - Current status: %s   " "$elapsed" "$attempt" "$CLUSTER_STATUS"
          sleep 5
          attempt=$((attempt+1))
        done


  port-operations:
    desc: Expose and check status of ports
    vars:
      OPERATION: '{{.OPERATION | default "expose"}}'
      CLUSTER_NAME: '{{.CLUSTER_NAME}}'
    cmds:
      - |
        set -e
        CLUSTER_ID=$(replicated cluster ls --output json | jq -r '.[] | select(.name == "{{.CLUSTER_NAME}}") | .id // empty')
        if [ -z "$CLUSTER_ID" ]; then
          echo "Error: Could not find cluster with name {{.CLUSTER_NAME}}"
          exit 1
        fi
        
        if [ "{{.OPERATION}}" = "expose" ]; then
          echo "Exposing ports for cluster {{.CLUSTER_NAME}} (ID: $CLUSTER_ID)..."
          
          {{range .EXPOSE_PORTS}}
          echo "Exposing port {{.port}} for {{.protocol}}..."
          replicated cluster port expose $CLUSTER_ID --port {{.port}} --protocol {{.protocol}}
          {{end}}
        elif [ "{{.OPERATION}}" = "getenv" ]; then
          # Get TF_EXPOSED_URL for HTTPS
          TF_EXPOSED_URL=$(replicated cluster port ls $CLUSTER_ID --output json | jq -r '.[] | select(.upstream_port == 30443 and .exposed_ports[0].protocol == "https") | .hostname' | head -n 1)
          
          if [ -z "$TF_EXPOSED_URL" ]; then
            echo "Error: Could not determine TF_EXPOSED_URL. HTTPS port is not properly exposed."
            echo "Please ensure the HTTPS port is exposed before deploying."
            exit 1
          fi
          
          echo "TF_EXPOSED_URL=$TF_EXPOSED_URL"
        fi
        
  vendor-api-auth:
    desc: Verify authorization against Replicated Vendor API
    vars:
      API_TOKEN: '{{.REPLICATED_API_TOKEN | default (env "REPLICATED_API_TOKEN")}}'
    cmds:
      - |
        echo "Verifying Replicated Vendor API authorization..."
        
        # Check if API token is provided
        if [ -z "{{.API_TOKEN}}" ]; then
          echo "ERROR: No API token provided."
          echo "Please set the REPLICATED_API_TOKEN environment variable or provide it as a task variable."
          echo "You can generate an API token in the Replicated Vendor Portal under 'API Tokens'."
          echo "Documentation: https://docs.replicated.com/reference/vendor-api-using"
          exit 1
        fi
        
        # Make API request to check authentication
        AUTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Authorization: {{.API_TOKEN}}" \
          -H "Content-Type: application/json" \
          -H "Accept: application/json" \
          "https://api.replicated.com/vendor/v3/auth")
        
        if [ "$AUTH_RESPONSE" = "200" ]; then
          echo "Authentication successful! Token is valid."
          exit 0
        else
          echo "ERROR: Authentication failed with status code $AUTH_RESPONSE."
          echo "Please check your API token and try again."
          exit 1
        fi

  get-customer-license:
    desc: Retrieve a customer's license ID by name
    silent: true
    vars:
      CUSTOMER_NAME: '{{.CUSTOMER_NAME | default ""}}'
      # Use the normalize-name util for consistent normalization
      # Use the normalize-name util for consistent normalization
      NORMALIZED_CUSTOMER_NAME:
        sh: |
          if [ -n "{{.CUSTOMER_NAME}}" ]; then
            task utils:normalize-name INPUT_NAME="{{.CUSTOMER_NAME}}"
          fi
    cmds:
      - |
        if [ -z "{{.CUSTOMER_NAME}}" ]; then
          echo "ERROR: CUSTOMER_NAME is required"
          echo "Usage: task utils:get-customer-license CUSTOMER_NAME=your-customer-name"
          exit 1
        fi
        
        # Get customer license ID using Replicated CLI
        LICENSE_ID=$(replicated customer ls --output json | jq -r '.[] | select(.name == "{{.NORMALIZED_CUSTOMER_NAME}}") | .installationId // empty')
        
        if [ -z "$LICENSE_ID" ] || [ "$LICENSE_ID" = "null" ]; then
          echo "ERROR: Could not find customer with name '{{.NORMALIZED_CUSTOMER_NAME}}'" >&2
          echo "Available customers:" >&2
          replicated customer ls --output json | jq -r '.[] | "  - \(.name) (ID: \(.id))"' >&2
          exit 1
        fi
        
        echo "$LICENSE_ID"

  normalize-name:
    desc: Normalize git branch names by replacing delimiters with hyphens
    silent: true
    vars:
      INPUT_NAME: '{{.INPUT_NAME | default ""}}'
    cmds:
      - |
        if [ -z "{{.INPUT_NAME}}" ]; then
          echo "ERROR: INPUT_NAME is required"
          exit 1
        fi
        
        # Normalize by replacing common git branch delimiters with hyphens
        # This matches how slugs are represented in the Replicated Vendor Portal backend
        echo "{{.INPUT_NAME}}" | tr '/' '-' | tr '_' '-' | tr '.' '-'

  get-customer-info:
    desc: Get customer information by name or ID (supports bidirectional conversion)
    silent: false
    vars:
      CUSTOMER_NAME: '{{.CUSTOMER_NAME | default ""}}'
      CUSTOMER_ID: '{{.CUSTOMER_ID | default ""}}'
      OUTPUT_FORMAT: '{{.OUTPUT_FORMAT | default "id"}}'
      # Use the normalize-name util for consistent normalization
      # Use the normalize-name util for consistent normalization
      NORMALIZED_CUSTOMER_NAME:
        sh: |
          if [ -n "{{.CUSTOMER_NAME}}" ]; then
            task utils:normalize-name INPUT_NAME="{{.CUSTOMER_NAME}}"
          fi
    cmds:
      - |
        # Validate input parameters
        if [ -z "{{.CUSTOMER_NAME}}" ] && [ -z "{{.CUSTOMER_ID}}" ]; then
          echo "ERROR: Either CUSTOMER_NAME or CUSTOMER_ID is required"
          echo "Usage: task utils:get-customer-info CUSTOMER_NAME=name [OUTPUT_FORMAT=id|name|json]"
          echo "   or: task utils:get-customer-info CUSTOMER_ID=id [OUTPUT_FORMAT=id|name|json]"
          exit 1
        fi
        
        if [ -n "{{.CUSTOMER_NAME}}" ] && [ -n "{{.CUSTOMER_ID}}" ]; then
          echo "ERROR: Specify either CUSTOMER_NAME or CUSTOMER_ID, not both"
          exit 1
        fi
        
        # Get all customers as JSON
        CUSTOMERS_JSON=$(replicated customer ls --output json)
        
        if [ -n "{{.CUSTOMER_NAME}}" ]; then
          # Find customer by name
          echo "Looking up customer by name: {{.NORMALIZED_CUSTOMER_NAME}}"
          CUSTOMER_INFO=$(echo "$CUSTOMERS_JSON" | jq -r '.[] | select(.name == "{{.NORMALIZED_CUSTOMER_NAME}}") // empty')
          
          if [ -z "$CUSTOMER_INFO" ] || [ "$CUSTOMER_INFO" = "null" ]; then
            echo "ERROR: Could not find customer with name '{{.NORMALIZED_CUSTOMER_NAME}}'"
            echo "Available customers:"
            echo "$CUSTOMERS_JSON" | jq -r '.[] | "  - \(.name) (ID: \(.id))"'
            exit 1
          fi
          
        elif [ -n "{{.CUSTOMER_ID}}" ]; then
          # Find customer by ID
          echo "Looking up customer by ID: {{.CUSTOMER_ID}}"
          CUSTOMER_INFO=$(echo "$CUSTOMERS_JSON" | jq -r '.[] | select(.id == "{{.CUSTOMER_ID}}") // empty')
          
          if [ -z "$CUSTOMER_INFO" ] || [ "$CUSTOMER_INFO" = "null" ]; then
            echo "ERROR: Could not find customer with ID '{{.CUSTOMER_ID}}'"
            echo "Available customers:"
            echo "$CUSTOMERS_JSON" | jq -r '.[] | "  - \(.name) (ID: \(.id))"'
            exit 1
          fi
        fi
        
        # Output based on requested format
        case "{{.OUTPUT_FORMAT}}" in
          "id")
            echo "$CUSTOMER_INFO" | jq -r '.id'
            ;;
          "name")
            echo "$CUSTOMER_INFO" | jq -r '.name'
            ;;
          "json")
            echo "$CUSTOMER_INFO" | jq '.'
            ;;
          *)
            echo "ERROR: Invalid OUTPUT_FORMAT '{{.OUTPUT_FORMAT}}'. Valid options: id, name, json"
            exit 1
            ;;
        esac

  get-channel-slug:
    desc: Get channel slug (name) from channel ID
    silent: true
    vars:
      CHANNEL_ID: '{{.CHANNEL_ID | default ""}}'
    cmds:
      - |
        if [ -z "{{.CHANNEL_ID}}" ]; then
          echo "ERROR: CHANNEL_ID is required"
          echo "Usage: task utils:get-channel-slug CHANNEL_ID=your-channel-id"
          exit 1
        fi
        
        # Get channel slug using Replicated CLI
        CHANNEL_SLUG=$(replicated channel ls --output json | jq -r '.[] | select(.id == "{{.CHANNEL_ID}}") | .channelSlug // empty')
        
        if [ -z "$CHANNEL_SLUG" ] || [ "$CHANNEL_SLUG" = "null" ]; then
          echo "ERROR: Could not find channel with ID '{{.CHANNEL_ID}}'"
          echo "Available channels:"
          replicated channel ls --output json | jq -r '.[] | "  - \(.name) (ID: \(.id))"'
          exit 1
        fi
        
        echo "$CHANNEL_SLUG"

  get-channel-id:
    desc: Get channel ID from channel slug (name)
    silent: true
    vars:
      CHANNEL_NAME: '{{.CHANNEL_NAME | default ""}}'
      # Use the normalize-name util for consistent normalization
      NORMALIZED_CHANNEL_NAME:
        sh: |
          if [ -n "{{.CHANNEL_NAME}}" ]; then
            task utils:normalize-name INPUT_NAME="{{.CHANNEL_NAME}}"
          fi
    cmds:
      - |
        if [ -z "{{.CHANNEL_NAME}}" ]; then
          echo "ERROR: CHANNEL_NAME is required"
          echo "Usage: task utils:get-channel-id CHANNEL_NAME=your-channel-name"
          exit 1
        fi
        
        # Get channel ID using Replicated CLI
        CHANNEL_ID=$(replicated channel ls --output json | jq -r '.[] | select(.name == "{{.NORMALIZED_CHANNEL_NAME}}") | .id // empty')
        
        if [ -z "$CHANNEL_ID" ] || [ "$CHANNEL_ID" = "null" ]; then
          echo "ERROR: Could not find channel with name '{{.NORMALIZED_CHANNEL_NAME}}'"
          echo "Available channels:"
          replicated channel ls --output json | jq -r '.[] | "  - \(.name) (ID: \(.id))"'
          exit 1
        fi
        
        echo "$CHANNEL_ID"

  gcp-operations:
    desc: GCP VM operations
    internal: true
    vars:
      OPERATION: '{{.OPERATION}}'
      GCP_PROJECT: '{{.GCP_PROJECT}}'
      GCP_ZONE: '{{.GCP_ZONE}}'
      VM_NAME: '{{.VM_NAME}}'
    cmds:
      - |
        if [ -z "{{.GCP_PROJECT}}" ]; then
          echo "Error: GCP_PROJECT is required. Please specify with GCP_PROJECT=your-project-id"
          exit 1
        fi
        
        if [ "{{.OPERATION}}" = "create" ]; then
          echo "Creating GCP VM instance {{.VM_NAME}}..."
          
          # Create the VM
          gcloud compute instances create {{.VM_NAME}} \
            --project={{.GCP_PROJECT}} \
            --zone={{.GCP_ZONE}} \
            --machine-type={{.GCP_MACHINE_TYPE}} \
            --image-family={{.GCP_IMAGE_FAMILY}} \
            --image-project={{.GCP_IMAGE_PROJECT}} \
            --boot-disk-size={{.GCP_DISK_SIZE}}GB \
            --boot-disk-type={{.GCP_DISK_TYPE}} \
            --labels=expires-on=never,owner={{or (env "GUSER") "user"}}
          
          # Get the external IP
          EXTERNAL_IP=$(gcloud compute instances describe {{.VM_NAME}} --project={{.GCP_PROJECT}} --zone={{.GCP_ZONE}} --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          
          echo "VM {{.VM_NAME}} created successfully with IP: $EXTERNAL_IP"
          echo "You can SSH into the VM with: gcloud compute ssh {{.VM_NAME}} --project={{.GCP_PROJECT}} --zone={{.GCP_ZONE}}"
          
          # Wait for VM to be fully in RUNNING state (should be immediate, but just in case)
          echo "Verifying VM is in RUNNING state..."
          start=$(date +%s)
          attempt=1
          timeout=30  # 30 seconds timeout
          
          while true; do
            VM_STATUS=$(gcloud compute instances describe {{.VM_NAME}} --project={{.GCP_PROJECT}} --zone={{.GCP_ZONE}} --format='get(status)' 2>/dev/null || echo "PENDING")
            
            if [ "$VM_STATUS" = "RUNNING" ]; then
              elapsed=$(($(date +%s) - start))
              echo "VM {{.VM_NAME}} is in RUNNING state! (took $elapsed seconds)"
              break
            fi
            
            elapsed=$(($(date +%s) - start))
            if [ $elapsed -ge $timeout ]; then
              echo "Timeout after $timeout seconds waiting for VM to be ready"
              exit 1
            fi
            
            printf "\rWaiting... %ds elapsed (attempt %d) - Current status: %s   " "$elapsed" "$attempt" "$VM_STATUS"
            sleep 1
            attempt=$((attempt+1))
          done

        elif [ "{{.OPERATION}}" = "delete" ]; then
          echo "Deleting GCP VM instance {{.VM_NAME}}..."
          
          # Delete the VM
          gcloud compute instances delete {{.VM_NAME}} \
            --project={{.GCP_PROJECT}} \
            --zone={{.GCP_ZONE}} \
            --quiet
          
          echo "VM {{.VM_NAME}} deleted successfully"
          
        elif [ "{{.OPERATION}}" = "setup-embedded" ]; then
          echo "Setting up embedded cluster on GCP VM {{.VM_NAME}}..."
          
          # Wait for SSH to be ready with retry logic
          echo "Waiting for SSH to be ready on VM {{.VM_NAME}}..."
          start=$(date +%s)
          attempt=1
          timeout=60  # 60 seconds timeout for SSH
          
          while true; do
            if gcloud compute ssh {{.VM_NAME}} --project={{.GCP_PROJECT}} --zone={{.GCP_ZONE}} --command="echo 'SSH is ready'" &>/dev/null; then
              elapsed=$(($(date +%s) - start))
              echo "SSH connection established successfully! (took $elapsed seconds)"
              break
            fi
            
            elapsed=$(($(date +%s) - start))
            if [ $elapsed -ge $timeout ]; then
              echo "Timeout after $timeout seconds waiting for SSH to be ready"
              exit 1
            fi
            
            printf "\rWaiting... %ds elapsed (attempt %d) - SSH not ready yet   " "$elapsed" "$attempt"
            sleep 2
            attempt=$((attempt+1))
          done
          
          # Run installation commands on the VM
          echo "Installing embedded cluster on VM..."
          gcloud compute ssh {{.VM_NAME}} --project={{.GCP_PROJECT}} --zone={{.GCP_ZONE}} --command="
            set -e
            echo 'Downloading {{.APP_NAME}} installer...'
            curl -f 'https://replicated.app/embedded/{{.APP_NAME}}/{{.CHANNEL}}' -H 'Authorization: {{.AUTH_TOKEN}}' -o {{.APP_NAME}}-{{.CHANNEL}}.tgz
            
            echo 'Extracting installer...'
            tar -xvzf {{.APP_NAME}}-{{.CHANNEL}}.tgz
          "
          
          echo "Embedded cluster setup initiated on VM {{.VM_NAME}}"
          echo "You can SSH into the VM with: gcloud compute ssh {{.VM_NAME}} --project={{.GCP_PROJECT}} --zone={{.GCP_ZONE}}"
        fi
