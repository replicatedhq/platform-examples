version: "3"

vars:
  DEV_CONTAINER_REGISTRY: '{{.DEV_CONTAINER_REGISTRY | default "ghcr.io"}}'
  DEV_CONTAINER_IMAGE: '{{.DEV_CONTAINER_IMAGE | default "replicatedhq/platform-examples/wg-easy-tools"}}'
  DEV_CONTAINER_TAG: '{{.DEV_CONTAINER_TAG | default "latest"}}'
  DEV_CONTAINER_NAME: '{{.DEV_CONTAINER_NAME | default "wg-easy-tools"}}'
  CONTAINER_RUNTIME: '{{.CONTAINER_RUNTIME | default "podman"}}'

# Development environment tasks
tasks:
  shell:
    desc: Attach to development container shell
    silent: true
    requires:
      vars: [DEV_CONTAINER_NAME]
    deps:
      - task: start
    cmds:
      - echo "Connecting to {{.DEV_CONTAINER_NAME}}..."
      - '{{.CONTAINER_RUNTIME}} exec -it {{.DEV_CONTAINER_NAME}} {{.CMD}}'
    vars:
      CMD: |-
          {{if .CMD}}bash -c '{{.CMD}}'{{else}}/bin/bash{{end}}

  build-image:
    desc: Build development container image
    vars:
      IMAGE_NAME: '{{.DEV_CONTAINER_REGISTRY}}/{{.DEV_CONTAINER_IMAGE}}:{{.DEV_CONTAINER_TAG}}'
      CONTAINERFILE: '{{.CONTAINERFILE | default "./container/Containerfile"}}'
      BUILD_ARGS: '{{.BUILD_ARGS | default ""}}'
    requires:
      vars: [DEV_CONTAINER_REGISTRY, DEV_CONTAINER_IMAGE, CONTAINERFILE]

    cmds:
      - '{{.CONTAINER_RUNTIME}} build -t {{.IMAGE_NAME}} -f {{.CONTAINERFILE}} .'

  # Start development container in background.
  start:
    desc: Start development container in background
    silent: true
    run: once
    vars:
      IMAGE_NAME: '{{.DEV_CONTAINER_REGISTRY}}/{{.DEV_CONTAINER_IMAGE}}:{{.DEV_CONTAINER_TAG}}'
      CONTAINERFILE: '{{.CONTAINERFILE | default "./container/Containerfile"}}'
      BUILD_ARGS: '{{.BUILD_ARGS | default ""}}'
    requires:
      vars: [DEV_CONTAINER_REGISTRY, DEV_CONTAINER_IMAGE, DEV_CONTAINER_TAG, DEV_CONTAINER_NAME, REPLICATED_API_TOKEN]

    status:
      - '{{.CONTAINER_RUNTIME}} ps | grep -q "{{.DEV_CONTAINER_NAME}}"'
    cmds:
      - |
        # Check if the image exists locally
        # If not, pull it from the registry
        # If that fails, build it locally
        if ! {{.CONTAINER_RUNTIME}} image exists {{.IMAGE_NAME}}; then
          echo "Image {{.IMAGE_NAME}} not found locally."
          echo "Attempting to pull the image..."
          if ! {{.CONTAINER_RUNTIME}} pull {{.IMAGE_NAME}}; then
            echo "Failed to pull image. Building it locally..."
            {{.CONTAINER_RUNTIME}} build -t {{.IMAGE_NAME}} -f {{.CONTAINERFILE}} .
          fi
        fi

        # Start container with host networking for kubectl port-forward compatibility
        CONTAINER_ID=$({{.CONTAINER_RUNTIME}} run --rm --name {{.DEV_CONTAINER_NAME}} -d \
          -v $(pwd):/workspace \
          -v $(pwd)/taskfiles/internal.yaml:/workspace/Taskfile.yaml \
          -e REPLICATED_API_TOKEN={{ .REPLICATED_API_TOKEN }} \
          {{.IMAGE_NAME}} bash -c 'trap "exit 0" TERM; sleep infinity & wait')

        if [ $? -eq 0 ]; then
          echo "Development container started successfully with ID: $CONTAINER_ID"
        else
          echo "Failed to start development container"
          exit 1
        fi

  stop:
    desc: Stop development container
    silent: true
    requires:
      vars: [DEV_CONTAINER_NAME]
    cmds:
      - |
        if {{.CONTAINER_RUNTIME}} ps | grep -q "{{.DEV_CONTAINER_NAME}}"; then
          echo "Stopping {{.DEV_CONTAINER_NAME}} development container..."
          {{.CONTAINER_RUNTIME}} stop {{.DEV_CONTAINER_NAME}}
        else
          echo "Container {{.DEV_CONTAINER_NAME}} is not running"
        fi

  restart:
    desc: Restart development container
    silent: true
    requires:
      vars: [DEV_CONTAINER_NAME]
    cmds:
      - task: stop
      - task: start
