version: "3"

# Development environment tasks
tasks:
  build-image:
    desc: Build development container image
    vars:
      DEV_CONTAINER_TAG: '{{.DEV_CONTAINER_TAG | default "latest"}}'
      CONTAINERFILE: '{{.CONTAINERFILE | default "./container/Containerfile"}}'
      BUILD_ARGS: '{{.BUILD_ARGS | default ""}}'
    requires:
      vars: [DEV_CONTAINER_REPOSITORY, DEV_CONTAINER_IMAGE, CONTAINERFILE]

    cmds:
      - '{{.CONTAINER_RUNTIME}} build -t {{.DEV_CONTAINER_REPOSITORY}}/{{.DEV_CONTAINER_IMAGE}}:{{.DEV_CONTAINER_TAG}} -f {{.CONTAINERFILE}} .'

  start:
    desc: Start development container in background
    silent: true
    cmds:
      - task: start-implementation

  # Start development container in background.
  # It's internal because it's used by shell and start tasks.
  start-implementation:
    desc: Start development container in background
    silent: true
    run: once
    internal: true
    vars:
      DEV_CONTAINER_REPOSITORY: '{{.DEV_CONTAINER_REPOSITORY}}'
      DEV_CONTAINER_IMAGE: '{{.DEV_CONTAINER_IMAGE}}'
      DEV_CONTAINER_TAG: '{{.DEV_CONTAINER_TAG | default "latest"}}'
      DEV_CONTAINER_NAME: '{{.DEV_CONTAINER_NAME}}'
    requires:
      vars: [DEV_CONTAINER_REPOSITORY, DEV_CONTAINER_IMAGE, DEV_CONTAINER_TAG, DEV_CONTAINER_NAME, REPLICATED_API_TOKEN]

    status:
      - '{{.CONTAINER_RUNTIME}} ps | grep -q "{{.DEV_CONTAINER_NAME}}"'
    cmds:
      - |
        # Start container with host networking for kubectl port-forward compatibility
        CONTAINER_ID=$({{.CONTAINER_RUNTIME}} run --rm --name {{.DEV_CONTAINER_NAME}} -d \
          -v $(pwd):/workspace \
          -e HOME=/home/devuser \
          -e USER=devuser \
          -e REPLICATED_API_TOKEN={{ .REPLICATED_API_TOKEN }} \
          -w /workspace \
          {{.DEV_CONTAINER_REPOSITORY}}/{{.DEV_CONTAINER_IMAGE}}:{{.DEV_CONTAINER_TAG}} bash -c 'trap "exit" TERM; while :; do sleep 0.1; done')

        if [ $? -eq 0 ]; then
          echo "Development container started successfully with ID: $CONTAINER_ID"
        else
          echo "Failed to start development container"
          exit 1
        fi

  shell:
    desc: Attach to development container shell
    silent: true
    requires:
      vars: [DEV_CONTAINER_NAME]
    deps:
      - start-implementation
    cmds:
      - echo "Connecting to {{.DEV_CONTAINER_NAME}}..."
      - '{{.CONTAINER_RUNTIME}} exec -it {{.DEV_CONTAINER_NAME}} /bin/bash'

  stop:
    desc: Stop development container
    silent: true
    requires:
      vars: [DEV_CONTAINER_NAME]
    cmds:
      - |
        if {{.CONTAINER_RUNTIME}} ps | grep -q "{{.DEV_CONTAINER_NAME}}"; then
          echo "Stopping {{.DEV_CONTAINER_NAME}} development container..."
          {{.CONTAINER_RUNTIME}} stop {{.DEV_CONTAINER_NAME}}
        else
          echo "Container {{.DEV_CONTAINER_NAME}} is not running"
        fi

  restart:
    desc: Restart development container
    silent: true
    requires:
      vars: [DEV_CONTAINER_NAME]
    cmds:
      - task: stop
      - task: start
