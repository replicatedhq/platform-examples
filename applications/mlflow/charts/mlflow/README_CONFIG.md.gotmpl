{{- define "custom.config.header" -}}
# Configuration

This document outlines the configuration options for the MLflow Helm chart.
{{- end -}}

{{- define "custom.config.introduction" -}}
The following table lists the configurable parameters for the MLflow chart and their default values.
{{- end -}}

{{- define "custom.config.advanced" -}}
## Advanced Configuration

### PostgreSQL Configuration

The chart uses PostgreSQL for storing MLflow metadata. You can configure the embedded PostgreSQL database using:

```yaml
postgres:
  embedded:
    # Enable embedded PostgreSQL
    enabled: true
    # Number of PostgreSQL instances for high availability
    instances: 3
    # Database name
    initdb:
      database: mlflow
      owner: mlflow
    # Storage configuration
    storage:
      size: 10Gi
      storageClass: ""
    # Resource configuration
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "2Gi"
        cpu: "1000m"
```

### MinIO Configuration

MinIO is used for artifact storage. Configure it with:

```yaml
minio:
  enabled: true
  # Authentication credentials
  secrets:
    name: myminio-env-configuration
    accessKey: minio
    secretKey: minio1234
  # MinIO tenant configuration
  tenant:
    # Resource pool configuration
    pools:
      pool0:
        servers: 3
        volumesPerServer: 4
        size: 10Gi
        resources:
          requests:
            memory: "1Gi"
            cpu: "250m"
    # Create a bucket during provisioning
    buckets:
    - name: mlflow
```
{{- end -}}

{{- define "custom.config.externalServices" -}}
### Using External Storage

#### External PostgreSQL

To use an external PostgreSQL database instead of the embedded one:

```yaml
# Disable the embedded PostgreSQL
postgres:
  embedded:
    enabled: false
  external:
    enabled: true
    # External PostgreSQL connection details
    host: "external-postgresql-host"
    port: 5432
    database: "mlflow"

# Configure MLflow backend store
mlflow:
  backendStore:
    # Option 1: Using a full database URI
    databaseUri: "postgresql://user:password@external-postgresql-host:5432/mlflow"
    # OR Option 2: The connection details will be auto-configured from postgres.external values
```

Make sure your external database is accessible from your Kubernetes cluster and has the necessary permissions for MLflow to create its schema.

#### External S3-compatible Storage

To use external S3-compatible storage for MLflow artifacts:

```yaml
# Disable the embedded MinIO
minio:
  enabled: false

# Configure MLflow artifact store to use external S3
mlflow:
  # Set the artifact destination
  trackingServer:
    artifactsDestination: "s3://my-external-bucket/mlflow"
  
  # Configure S3 artifact store
  artifactStore:
    s3:
      enabled: true
      # Option 1: Using an existing secret with AWS credentials
      existingSecret: "my-aws-secret"
      # OR Option 2: Provide credentials directly (not recommended for production)
      # accessKeyId: "your-access-key"
      # secretAccessKey: "your-secret-key"
      
      # Configure external S3 details
      external:
        enabled: true
        protocol: https
        host: "s3.amazonaws.com"  # For AWS S3
        # host: "storage.googleapis.com"  # For Google Cloud Storage
        port: 443
        ignoreTls: false
```

This configuration works with any S3-compatible storage, including:
- Amazon S3
- Google Cloud Storage (with interoperability enabled)
- MinIO (self-hosted)
- DigitalOcean Spaces
- And other compatible services
{{- end -}}

{{- define "custom.config.replicated" -}}
### Replicated SDK Integration

Enable or disable the Replicated SDK integration:

```yaml
replicated:
  enabled: true
```

For development environments, you'll typically want to disable this:

```yaml
replicated:
  enabled: false
```
{{- end -}}

{{- define "custom.config.security" -}}
### Security Configurations

Secure your MLflow deployment with the following configuration options.

#### Authentication and Authorization

MLflow supports several authentication methods:

```yaml
# Basic Auth
mlflow:
  auth:
    enabled: true
    type: "basic"
    users:
      - username: admin
        password: ""  # Will generate a random password if empty
        isAdmin: true
      - username: readonly
        password: "example-password"  # Not recommended, use secrets instead
        isAdmin: false

# OIDC/OAuth2 Integration
mlflow:
  auth:
    enabled: true
    type: "oauth"
    oauth:
      clientId: "mlflow-client"
      clientSecret: ""  # Use secretRef instead for production
      secretRef:
        name: "mlflow-oauth-secret"
        key: "client-secret"
      provider: "keycloak"  # or "okta", "auth0", etc.
      issuerUrl: "https://keycloak.example.com/auth/realms/mlflow"
      redirectUri: "https://mlflow.example.com/oauth/callback"
      scopes: "openid profile email"
```

#### Network Security

Secure communication with TLS and network policies:

```yaml
# TLS Configuration
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: mlflow.example.com
      paths:
        - path: /
  tls:
    - secretName: mlflow-tls
      hosts:
        - mlflow.example.com

# Network Policies
networkPolicies:
  enabled: true
  # Only allow traffic from specific namespaces
  ingressFrom:
    - namespaceSelector:
        matchLabels:
          name: data-science
    - namespaceSelector:
        matchLabels:
          name: ml-pipeline
```

#### Secrets Management

Use Kubernetes secrets for sensitive information:

```yaml
secretsManager:
  enabled: true
  # Integrate with external secrets providers
  externalSecrets:
    enabled: true
    backend: "aws-secretsmanager"  # or "vault", "gcp-secretmanager"
    secretMapping:
      - secretName: "mlflow-database-credentials"
        externalName: "prod/mlflow/db-credentials"
      - secretName: "mlflow-s3-credentials"
        externalName: "prod/mlflow/s3-credentials"
```

#### Pod Security Context

Set security contexts for pods and containers:

```yaml
securityContext:
  # Pod-level security context
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

# Container-level security context
containerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL
```
{{- end -}}

{{- define "custom.config.resources" -}}
### Resource Configurations

Configure appropriate resources for MLflow server and its dependencies to ensure optimal performance.

#### MLflow Server Resources

```yaml
mlflow:
  # Configure resources for the MLflow server
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
```

#### PostgreSQL Resources (when using embedded PostgreSQL)

```yaml
postgresql:
  # Configure resources for the PostgreSQL server
  primary:
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 256Mi
```

#### MinIO Resources (when using embedded MinIO)

```yaml
minio:
  # Configure resources for the MinIO server
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 250m
      memory: 512Mi
```

#### Advanced Configurations

For high-traffic environments, increase resource allocations and consider enabling autoscaling:

```yaml
mlflow:
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi
  
  # Configure horizontal pod autoscaling
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
```
{{- end -}}

{{- define "custom.config.persistence" -}}
### Persistence Configurations

Configure persistent storage for MLflow artifacts and databases to ensure data durability.

#### Artifact Storage

Configure MinIO or other S3-compatible storage for MLflow artifacts:

```yaml
# Using embedded MinIO (default)
minio:
  enabled: true
  persistence:
    enabled: true
    size: 10Gi
    storageClass: "standard"
  # Improve reliability with distributed setup
  mode: distributed
  replicas: 4

# Or configure external S3-compatible storage
externalS3:
  enabled: true
  endpoint: "s3.amazonaws.com"
  bucket: "mlflow-artifacts"
  region: "us-west-2"
  # Use Kubernetes secrets for credentials
  secretName: "s3-credentials"
```

#### Database Persistence

Configure PostgreSQL persistence for MLflow metadata:

```yaml
# Using embedded PostgreSQL (default)
postgresql:
  enabled: true
  persistence:
    enabled: true
    size: 8Gi
    storageClass: "standard"
  # Optional high-availability settings
  primary:
    persistence:
      enabled: true
      size: 8Gi
  
  # For production, consider configuring backups
  backup:
    enabled: true
    schedule: "0 0 * * *"  # Daily backup at midnight
    storage:
      storageClass: "standard"
      size: 10Gi

# Or configure external PostgreSQL
externalPostgresql:
  enabled: true
  host: "postgresql.database.svc.cluster.local"
  port: 5432
  database: "mlflow"
  # Use Kubernetes secrets for credentials
  secretName: "postgresql-credentials"
```

#### Backing Up and Restoring Data

For critical deployments, configure regular backups:

```yaml
backup:
  enabled: true
  schedule: "0 0 * * *"  # Daily backup at midnight
  retention: 7           # Keep 7 days of backups
  destination:
    s3:
      bucket: "mlflow-backups"
      region: "us-west-2"
      secretName: "backup-credentials"
```
{{- end -}}

{{- define "custom.config.monitoring" -}}
### Monitoring and Observability

Configure monitoring for your MLflow deployment to ensure optimal performance and reliability.

#### Prometheus Metrics

Enable Prometheus metrics collection for MLflow components:

```yaml
metrics:
  enabled: true
  serviceMonitor:
    enabled: true
    # If using Prometheus Operator
    additionalLabels:
      release: prometheus
    # Scrape interval
    interval: 30s
    # Metrics path
    path: /metrics
    # Metrics port
    port: metrics
```

#### Logging Configuration

Configure logging levels and output formats:

```yaml
logging:
  # Global log level
  level: INFO  # DEBUG, INFO, WARNING, ERROR
  # Log format options
  format: json  # or text
  # Retention configuration
  retention:
    days: 7
    maxSize: 500Mi
```

#### Grafana Dashboards

Automatically provision Grafana dashboards for MLflow metrics:

```yaml
dashboards:
  enabled: true
  # Label that Grafana uses to discover dashboards
  label: grafana_dashboard
  # Annotations
  annotations:
    grafana_folder: MLflow
  # Dashboard configurations
  mlflowDashboard:
    enabled: true
  databaseDashboard:
    enabled: true
  artifactStoreDashboard:
    enabled: true
```

#### Alerts and Notifications

Configure alerts for critical metrics:

```yaml
alerts:
  enabled: true
  # Configure alert rules
  rules:
    highCpuUsage:
      expr: 'avg(rate(container_cpu_usage_seconds_total{container="mlflow"}[5m])) > 0.8'
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: "High CPU usage for MLflow"
        description: "MLflow has high CPU usage (> 80%) for the last 10 minutes"
    
    highMemoryUsage:
      expr: 'avg(container_memory_usage_bytes{container="mlflow"}) / avg(container_spec_memory_limit_bytes{container="mlflow"}) > 0.9'
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: "High memory usage for MLflow"
        description: "MLflow is using over 90% of its memory allocation"
  
  # Configure alert receivers
  receivers:
    slack:
      enabled: true
      channel: "#mlflow-alerts"
      webhookUrl: ""  # Use secretRef in production
      secretRef:
        name: slack-webhook
        key: url
    email:
      enabled: false
      to: "mlops-team@example.com"
```

#### Tracing

Enable distributed tracing for MLflow requests:

```yaml
tracing:
  enabled: true
  # Supported providers: jaeger, zipkin, datadog
  provider: jaeger
  jaeger:
    endpoint: "http://jaeger-collector:14268/api/traces"
    samplingRate: 0.1  # Sample 10% of requests
  # Sample rate configuration
  sampler:
    type: const
    param: 1  # 1 = sample all, lower values sample less
```
{{- end -}}

{{- define "custom.config.ha" -}}
### High Availability and Scaling

Configure MLflow for high availability and optimal performance at scale.

#### Horizontal Pod Autoscaling

Enable automatic scaling based on resource utilization:

```yaml
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 25
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60
```

#### Multi-Zone Deployment

Configure pod anti-affinity for high availability across zones:

```yaml
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - mlflow
          topologyKey: "topology.kubernetes.io/zone"
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/role
              operator: In
              values:
                - mlflow-nodes
```

#### Replicas and Load Balancing

Configure the number of replicas and load balancing strategies:

```yaml
replicaCount: 3

service:
  type: ClusterIP
  port: 80
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 3 hours
```

#### Pod Disruption Budget

Define a Pod Disruption Budget to ensure availability during voluntary disruptions:

```yaml
podDisruptionBudget:
  enabled: true
  minAvailable: 1
  # Or use maxUnavailable instead
  # maxUnavailable: 1
```

#### Database High Availability

Configure database for high availability:

```yaml
postgresql:
  enabled: true
  architecture: replication
  auth:
    username: mlflow
    database: mlflow
  primary:
    replicaCount: 1
    persistence:
      enabled: true
      size: 10Gi
  readReplicas:
    replicaCount: 2
    persistence:
      enabled: true
      size: 10Gi
  metrics:
    enabled: true
  volumePermissions:
    enabled: true
```

#### Connection Pooling

Configure connection pooling for database access:

```yaml
connectionPooling:
  enabled: true
  maxConnections: 100
  minConnections: 5
  maxConnectionAge: 600  # 10 minutes
  connectionTimeout: 30  # 30 seconds
  poolSize: 20
```

#### Resource Allocation

Configure resource requests and limits appropriate for high-traffic environments:

```yaml
resources:
  limits:
    cpu: 2000m
    memory: 4Gi
  requests:
    cpu: 500m
    memory: 1Gi

# Job specific resources
jobs:
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 250m
      memory: 512Mi
```
{{- end -}}

{{- define "custom.understanding.platform" -}}
### Understanding Platform Integration Files

This section describes the KOTS manifest files used for platform integration in the `applications/mlflow/kots` directory. These files enable MLflow to be deployed through the Replicated platform.

#### KOTS Manifest Files

| File | Description |
| ---- | ----------- |
| `kots-app.yaml` | Defines the application metadata for KOTS, including title, icon, status informers, and ports. |
| `kots-config.yaml` | Contains all configurable options presented to the user during installation, organized in groups like database settings, S3 storage, and networking configuration. |
| `mlflow-chart.yaml` | A HelmChart custom resource that integrates the MLflow Helm chart with KOTS, connecting user configuration options to Helm values. |
| `infra-chart.yaml` | A HelmChart custom resource for infrastructure components that MLflow depends on. |
| `kots-preflight.yaml` | Defines preflight checks that run before installation to validate the environment meets requirements. |
| `kots-support-bundle.yaml` | Configures support bundle collection for troubleshooting. |
| `k8s-app.yaml` | Kubernetes Application custom resource definition. |
| `ec.yaml` | EntitlementSpec that defines license entitlements and limits. |

#### Integration Pattern

These files work together to create an integrated experience:

1. The user configures settings through the options defined in `kots-config.yaml`
2. The values are injected into the Helm charts via template functions in `mlflow-chart.yaml` and `infra-chart.yaml`
3. Preflight checks in `kots-preflight.yaml` ensure the environment is properly set up
4. Deployment status is tracked via the informers defined in `kots-app.yaml`

When making changes to the MLflow Helm chart, corresponding updates may be needed in the KOTS manifests to ensure proper integration.
{{- end -}}

{{- define "custom.config.all" -}}
{{- template "custom.config.resources" . -}}
{{- template "custom.config.persistence" . -}}
{{- template "custom.config.security" . -}}
{{- template "custom.config.monitoring" . -}}
{{- template "custom.config.ha" . -}}
{{- template "custom.understanding.platform" . -}}
{{- template "chart.valuesTable" . -}}
{{- end -}}

{{ template "custom.config.header" . }}

{{ template "custom.config.introduction" . }}

{{ template "custom.config.advanced" . }}

{{ template "custom.config.externalServices" . }}

{{ template "custom.config.replicated" . }}

{{ template "custom.config.security" . }}

{{ template "custom.config.resources" . }}

{{ template "custom.config.persistence" . }}

{{ template "custom.config.monitoring" . }}

{{ template "custom.config.ha" . }}

{{ template "custom.understanding.platform" . }}

{{ template "chart.valuesTable" . }}

{{ template "chart.maintainersSection" . }}
