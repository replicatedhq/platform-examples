{{- if .Values.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "crdCheck.fullname" . }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    spec:
      serviceAccountName: {{ include "crdCheck.fullname" . }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: crd-check
        image: "{{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default (printf "v%s" .Chart.AppVersion) }}"
        command:
        - /bin/bash
        - -c
        - |
          TIMEOUT={{ .Values.timeout }}
          START_TIME=$(date +%s)
          CRDS=({{ range .Values.crds }} "{{ .name }}" {{ end }})
          for CRD_NAME in "${CRDS[@]}"; do
            while true; do
              if kubectl get crd $CRD_NAME -o jsonpath='{.status.conditions[?(@.type=="Established")].status}' | grep -q "True"; then
                echo "CRD $CRD_NAME is established."
                break
              fi
              if [ $(($(date +%s) - $START_TIME)) -ge $TIMEOUT ]; then
                echo "Timeout: CRD $CRD_NAME was not established within $TIMEOUT seconds."
                exit 1
              fi
              echo "Waiting for CRD $CRD_NAME to be created and established...";
              sleep 5;
            done
          done
          exit 0
      restartPolicy: OnFailure
{{- end }}
