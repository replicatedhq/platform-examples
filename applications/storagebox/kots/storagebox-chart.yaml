apiVersion: kots.io/v1beta2
kind: HelmChart
metadata:
  name: storagebox
spec:
  chart:
    name: storagebox
    chartVersion: 0.18.0
  values:
    replicated:
      enabled: true
    nfs-server:
      enabled: repl{{ ConfigOptionEquals "nfs_enabled" "1" }}
      image:
        repository: repl{{ HasLocalRegistry | ternary LocalRegistryHost "proxy.xyyzx.net/storagebox/ghcr.io/obeone" }}/nfs-server
        pullPolicy: IfNotPresent
      imagePullSecrets:
        - name: repl{{ ImagePullSecretName }}
      global:
        fullnameOverride: nfs-server
      controller:
        annotations:
          backup.velero.io/backup-volumes: storagebox-nfs-server-shared
      persistence:
        shared:
          enabled: true
          type: pvc
          readOnly: false
          accessMode: ReadWriteOnce
          storageClass: ""
          size: repl{{ ConfigOption "nfs_storage_size" | default "10Gi" }}
          retain: true
          mountPath: repl{{ ConfigOption "nfs_share" }}
      env:
        NFS_EXPORT_0: repl{{ ConfigOption "nfs_share" }} repl{{ ConfigOption "nfs_share_options" }}
        NFS_LOG_LEVEL: debug
    cassandra:
      enabled: repl{{ ConfigOptionEquals "cassandra_enabled" "1" }}
      truststore_password : repl{{ ConfigOption "cassandra_truststore_password" }}
      keystore_password : repl{{ ConfigOption "cassandra_keystore_password" }}
      dbUser:
        user: repl{{ ConfigOption "cassandra_user" }}
        password: repl{{ ConfigOption "cassandra_password" }}
      tls:
        internodeEncryption: all
        clientEncryption: true
        autoGenerated: true
        certificatesSecret: cassandra-crt
        passwordsSecret: cassandra-credentials
        selfSignedCA: false
        cert: repl{{ ConfigOption `cassandra_tls_cert` }}
        key: repl{{ ConfigOption `cassandra_tls_key` }}
        ca: repl{{ ConfigOption `cassandra_tls_ca` }}
    postgres:
      enabled: repl{{ ConfigOptionEquals "postgres_enabled" "1" }}
      auth:
        username: repl{{ ConfigOption "postgres_user" }}
        password: repl{{ ConfigOption "postgres_password" }}
      embedded:
        enabled: true
        initdb:
          database: repl{{ ConfigOption "postgres_db" }}
          owner: repl{{ ConfigOption "postgres_db_owner" }}
        service:
          type: NodePort
    tenant:
      enabled: repl{{ ConfigOptionEquals "minio_tenant_enabled" "1" }}
      tenant:
        name: repl{{ ConfigOption "minio_tenant_name" }}
        image:
          repository: repl{{ HasLocalRegistry | ternary LocalRegistryHost "proxy.xyyzx.net/storagebox/quay.io/" }}/minio/minio
          pullPolicy: IfNotPresent
        imagePullSecret: { }
        scheduler: { }
        certificate:
          requestAutoCert: true
        configSecret:
          name: repl{{ ConfigOption "minio_tenant_configuration_name" }}
          accessKey: repl{{ ConfigOption "minio_tenant_configuration_access_key" }}
          secretKey: repl{{ ConfigOption "minio_tenant_configuration_secret_key" }}
        ingress:
          api:
            enabled: true
            ingressClassName: nginx
            labels: { }
            annotations: { }
            tls: [ ]
            host: minio.local
            path: /
            pathType: Prefix
          console:
            enabled: true
            ingressClassName: nginx
            labels: { }
            annotations: { }
            tls: [ ]
            host: minio-console.local
            path: /
            pathType: Prefix
        pools:
          - name: repl{{ ConfigOption "minio_tenant_pool_name" }}
            servers: repl{{ ConfigOption "minio_tenant_pool_servers" }}
            volumesPerServer: repl{{ ConfigOption "minio_tenant_pool_volumes_per_server" }}
            size: repl{{ ConfigOption "minio_tenant_pool_size" }}
            storageClassName: repl{{ ConfigOption "minio_tenant_pool_storage_class_name" }}
            storageAnnotations: { }
            annotations: { }
            labels: { }
            tolerations: [ ]
            nodeSelector: { }
            affinity: { }
            resources:
              limits:
                cpu: "2000m"
                memory: "4Gi"
              requests:
                cpu: "1000m"
                memory: "2Gi"
            securityContext:
              runAsUser: 1000
              runAsGroup: 1000
              fsGroup: 1000
              fsGroupChangePolicy: "OnRootMismatch"
              runAsNonRoot: true
            containerSecurityContext:
              runAsUser: 1000
              runAsGroup: 1000
              runAsNonRoot: true
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                  - ALL
              seccompProfile:
                type: RuntimeDefault
        metrics:
          enabled: repl{{ ConfigOptionEquals "minio_tenant_metrics_enabled" "1" }}
          port: repl{{ ConfigOption "minio_tenant_metrics_port" }}
          protocol: repl{{ ConfigOption "minio_tenant_metrics_protocol" }}
        buckets:
          - name: repl{{ ConfigOption "minio_tenant_bucket_name" }}
            objectLock: repl{{ ConfigOptionEquals "minio_tenant_bucket_object_lock" "1" }}
            region: repl{{ ConfigOption "minio_tenant_bucket_region" }}
        users:
          - name: repl{{ ConfigOption "minio_tenant_user_name" | default "minio-user" }}
            secretName: repl{{ ConfigOption "minio_tenant_user_secret" | default "minio-user-secret" }}

  optionalValues:
    - when: 'repl{{ ConfigOptionEquals "cassandra_tls_type" "cassandra_no_ssl" }}'
      recursiveMerge: true
      values:
        cassandra:
          tls:
            internodeEncryption: none
            clientEncryption: false
            autoGenerated: false
            certificatesSecret: ''
            selfSignedCA: false
    - when: 'repl{{ ConfigOptionEquals "cassandra_tls_type" "cassanda_self_signed_ca" }}'
      recursiveMerge: true
      values:
        cassandra:
          tls:
            selfSignedCA: true
            cert: ''
            key: ''
            ca: ''
