name: Build and Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version of the chart to test'
        required: true
        default: '0.2.0'

env:
  chart_name: replibot
  app_id: 2S2KBYYp3fKkP42pb3eJYIYJNYv
  channel_name: Replibot

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      APP_SLUG: "dexter-test3"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: dexteryanreplicated/replibot-testing:${{ github.event.inputs.version }}
      
      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Package Helm Chart
        run: helm package helm/${{ env.chart_name }} -d helm/manifests
      
      - name: upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: helm-package
          path: helm/manifests
          retention-days: 1
  
      - name: create-release
        id: create-release
        uses: replicatedhq/replicated-actions/create-release@v1
        with:
          api-token: ${{ secrets.REPLICATED_API_TOKEN }}
          app-slug: ${{ env.APP_SLUG }}
          yaml-dir: ./helm/manifests
          promote-channel: Replibot
          version: ${{ github.event.inputs.version }}

      - name: Get Release Channel ID
        id: get-release-channel-id
        run: |
          curl --request GET \
            --url 'https://api.replicated.com/vendor/v3/app/${{ env.app_id }}/channels?channelName=${{ env.channel_name }}' \
            --header 'Authorization: ${{ secrets.REPLICATED_API_TOKEN }}' \
            --header 'accept: application/json' | jq -r '.channels[0].id' > release-channel-id.txt
          echo "release-channel-id=$(cat release-channel-id.txt)" >> $GITHUB_OUTPUT

      - name: Get Channel Release Sequence
        id: get-channel-release-sequence
        run: |
          curl --request GET \
            --url https://api.replicated.com/vendor/v3/app/${{ env.app_id }}/channel/${{ steps.get-release-channel-id.outputs.release-channel-id }}/releases \
            --header 'Authorization: ${{ secrets.REPLICATED_API_TOKEN }}' \
            --header 'accept: application/json' | jq -r '.releases[0].channelSequence' > channel-release-sequence.txt
          echo "channel-release-sequence=$(cat channel-release-sequence.txt)" >> $GITHUB_OUTPUT

      - name: build airgap
        run: |
          curl --request POST \
            --url https://api.replicated.com/vendor/v3/app/${{ env.app_id }}/channel/${{ steps.get-release-channel-id.outputs.release-channel-id }}/release/${{ steps.get-channel-release-sequence.outputs.channel-release-sequence }}/airgap/build \
            --header 'Authorization: ${{ secrets.REPLICATED_API_TOKEN }}' \
            --header 'accept: application/json'
          
      - name: check airgap build success
        run: |
          max_retries=10
          attempt=0

          while true; do
            status=$(curl --silent --request GET \
              --url https://api.replicated.com/vendor/v3/app/${{ env.app_id }}/channel/${{ steps.get-release-channel-id.outputs.release-channel-id }}/releases \
              --header "Authorization: ${{ secrets.REPLICATED_API_TOKEN }}" \
              --header "accept: application/json" | jq -r '.releases[0].airgapBuildStatus')

            echo "Current airgapBuildStatus: $status"

            if [ "$status" == "built" ]; then
              echo "Airgap build is complete!"
              break
            elif [ "$status" == "failed" ]; then
              echo "Airgap build has failed. Exiting with error."
              exit 1
            elif [ "$status" == "building" ]; then
              echo "Airgap build is still in progress. Waiting for 60 seconds..."
              sleep 60
            fi

            attempt=$((attempt + 1))
            if [ "$attempt" -ge "$max_retries" ]; then
              echo "Maximum retries reached. Exiting with error."
              exit 1
            fi
          done
