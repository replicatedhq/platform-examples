# Default values for strapi.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

storage:
  claim:
    enabled: true
  accessModes: 
    - "ReadWriteOnce"
  mountPath: "/srv/app"
  capacity: 5Gi

image:
  repository: strapi/strapi
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "3.6.8"

configMap:
  enabled: true
  data:
    HOST: 0.0.0.0
    PORT: "1337"
    NODE_ENV: production
    DATABASE_HOST: postgres-nodeport
    DATABASE_PORT: "5432"
    DATABASE_USERNAME: strapi
    DATABASE_NAME: strapi
    DATABASE_CLIENT: postgres

secret:
  enabled: true
  data:
    APP_KEYS: "toBeModified1,toBeModified2"
    API_TOKEN_SALT: tobemodified
    ADMIN_JWT_SECRET: tobemodified
    TRANSFER_TOKEN_SALT: tobemodified
    JWT_SECRET: tobemodified
    DATABASE_USERNAME: strapi
    DATABASE_PASSWORD: strapi

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: NodePort
  port: 1337
  containerPort: 1337
  nodePort: 31337

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 600
readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 600
nodeSelector: {}

tolerations: []

affinity: {}

# -- Embedded Postgres configuration
# Deploys a cluster using the CloudnativePG Operator
# [[ref]](https://github.com/cloudnative-pg/cloudnative-pg)
postgres:
  # -- Postgres credentials secret configuration
  auth:
    username: strapi
    password: strapi

  embedded:
    # -- Specifies whether to enable the Embedded Postgres cluster
    enabled: true
    # -- Postgres cluster annotations
    annotations: {}
    # -- Addtional labels for Postgres cluster
    additionalLabels: {}
    # -- Number of Postgres instances to deploy
    instances: 1
    image:
      # -- Image registry
      repository: ghcr.io/cloudnative-pg/postgresql
      # -- Image tag
      tag: '15.2'
    # -- Image pull policy
    imagePullPolicy: IfNotPresent
    # -- Image pull secrets
    imagePullSecrets: []
    # -- Postgres InitDB configuration
    initdb:
      # -- Postgres database name to be initilized
      database: strapi
      # -- Postgres username name to be initilized
      owner: strapi
      # -- Postgres secret name
      secret:
        name: 'postgres-initdb-secret'
      # -- Postgres init application SQL
      postInitApplicationSQL: []
    # -- Postgres UID
    postgresUID: 26
    # -- Postgres GID
    postgresGID: 26
    service:
      enabled: true
      type: ClusterIP
    # -- Postgres storage configuration
    storage:
      size: 10Gi
      storageClass: ''
    # -- Postgres resources
    resources: {}
    # -- Postgres priority class name
    priorityClassName: ''
    # -- Postgres primary update method
    primaryUpdateMethod: switchover
    # -- Postgres primary update strategy
    primaryUpdateStrategy: unsupervised
    # -- Postgres log level
    logLevel: 'info'
    # -- Affinity/Anti-affinity rules for Pods.
    # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-AffinityConfiguration
    affinity:
      topologyKey: topology.kubernetes.io/zone
    # -- The configuration for the CA and related certificates.
    # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-CertificatesConfiguration
    certificates: {}
    # -- When this option is enabled, the operator will use the SuperuserSecret to update the postgres user password.
    # If the secret is not present, the operator will automatically create one.
    # When this option is disabled, the operator will ignore the SuperuserSecret content, delete it when automatically created,
    # and then blank the password of the postgres user by setting it to NULL.
    enableSuperuserAccess: true
    superuserSecret: ''

    # -- This feature enables declarative management of existing roles, as well as the creation of new roles if they are not
    # already present in the database.
    # See: https://cloudnative-pg.io/documentation/current/declarative_role_management/
    roles:
      []
      # - name: dante
      #   ensure: present
      #   comment: Dante Alighieri
      #   login: true
      #   superuser: false
      #   inRoles:
      #     - pg_monitor
      #     - pg_signal_backend

    # -- Configuration of the PostgreSQL server.
    # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-PostgresConfiguration
    postgresql:
      {}
